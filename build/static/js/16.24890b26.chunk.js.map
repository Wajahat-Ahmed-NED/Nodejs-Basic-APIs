{"version":3,"sources":["pages/extra-pages/Templates.js","../node_modules/@mui/icons-material/Edit.js"],"names":["style","position","top","left","transform","width","bgcolor","color","maxHeight","boxShadow","p","overflowX","overflowY","Templates","React","useState","open","setOpen","editModal","setEditModal","copyModal","setCopyModal","imports","setImports","convertLinks","setConvertLinks","trackingImage","setTrackingImage","name","setName","emailSource","setEmailSource","envelopSender","setEnvelopSender","subject","setSubject","text","setText","html","setHtml","id","setId","data","setData","setEditData","handleClose","handleCheckClose","handleAdd","Swal","fire","obj","envelope_sender","console","log","createTemplate","then","res","icon","title","showConfirmButton","timer","fetchUser","catch","err","response","message","getTemplates","handleImportSite","convert_links","content","importEmail","handleEditModal","e","entry","useEffect","sx","maxWidth","className","variant","gutterBottom","component","length","onClick","onClose","m","noValidate","autoComplete","label","size","onChange","target","value","class","type","placeholder","rows","checked","htmlFor","required","backgroundColor","fullWidth","map","i","Date","modified_date","toUTCString","deleteTemplate","handleDeleteGroup","preventDefault","editTemplate","_interopRequireDefault","require","Object","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/16.24890b26.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Typography, Button, Modal, Box, TextField, Card, CardContent, CardActions, IconButton } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {\r\n    createGroup,\r\n    createTemplate,\r\n    deleteGroup,\r\n    deleteTemplate,\r\n    editTemplate,\r\n    getGroups,\r\n    getGroupsSummary,\r\n    getTemplates,\r\n    importEmail\r\n} from 'api/api';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '33%',\r\n    bgcolor: 'rgb(36, 41, 57)',\r\n    color: 'white !important',\r\n    maxHeight: '500px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflowX: 'hidden',\r\n    overflowY: 'auto'\r\n    // minHeight: \"400px\",\r\n    // maxHeight: \"600px\",\r\n};\r\nexport default function Templates() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [editModal, setEditModal] = React.useState(false);\r\n    const [copyModal, setCopyModal] = React.useState(false);\r\n    const [imports, setImports] = React.useState(false);\r\n    const [convertLinks, setConvertLinks] = React.useState(true);\r\n    const [trackingImage, setTrackingImage] = React.useState(true);\r\n    const [name, setName] = React.useState('');\r\n    const [emailSource, setEmailSource] = React.useState('');\r\n    const [todos, setTodos] = useState([]);\r\n    const [envelopSender, setEnvelopSender] = useState('');\r\n    const [subject, setSubject] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [html, setHtml] = useState('');\r\n    const [position, setPosition] = useState('');\r\n    const [id, setId] = useState(0);\r\n    const [data, setData] = React.useState([]);\r\n    const [groupSummary, setGroupSummary] = React.useState([]);\r\n    const [editData, setEditData] = React.useState({});\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setEditModal(false);\r\n        setText('');\r\n        setHtml('');\r\n        setId(0);\r\n        setName('');\r\n        setSubject('');\r\n        setEnvelopSender('');\r\n        setEmailSource('');\r\n        setEditData({});\r\n        setCopyModal(false);\r\n    };\r\n    const handleCheckClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleEdit = (e) => {\r\n        e.preventDefault();\r\n        setEditModal(false);\r\n        if (name === '' || subject === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n        } else {\r\n            let obj = {\r\n                id: id,\r\n                name: name,\r\n                subject: subject,\r\n                text: text,\r\n                envelope_sender: envelopSender,\r\n                html: trackingImage ? html + ' ' + '<html><body><p>{{.Tracker}}</p></body></html>' : html\r\n                // ...editData\r\n            };\r\n            editTemplate(obj)\r\n                .then((res) => {\r\n                    console.log(res);\r\n\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success!',\r\n                        text: 'Template Updated successfully!',\r\n                        showConfirmButton: true,\r\n                        timer: 2000\r\n                    });\r\n                    fetchUser();\r\n                    handleClose();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    handleCheckClose();\r\n                    Swal.fire('Failed', err.response.data.message, 'error');\r\n                });\r\n        }\r\n    };\r\n    const handleAdd = () => {\r\n        setOpen(false);\r\n        if (name === '' || subject === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n        } else {\r\n            let obj = {\r\n                name: name,\r\n                subject: subject,\r\n                text: text,\r\n                envelope_sender: envelopSender,\r\n                html: trackingImage ? html + ' ' + '<html><body><p>{{.Tracker}}</p></body></html>' : html\r\n                // trackingImage,\r\n            };\r\n            console.log(trackingImage);\r\n            createTemplate(obj)\r\n                .then((res) => {\r\n                    console.log(res);\r\n\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success!',\r\n                        text: 'Template created successfully!',\r\n                        showConfirmButton: true,\r\n                        timer: 2000\r\n                    });\r\n                    fetchUser();\r\n                    handleClose();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    handleCheckClose();\r\n                    Swal.fire('Failed', err.response.data.message, 'error');\r\n                });\r\n        }\r\n    };\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (fname !== '' || lname !== '' || email !== '' || position !== '') {\r\n            let todo = { first_name: fname, last_name: lname, email: email, position: position };\r\n\r\n            setTodos([...todos, todo]);\r\n            setFname('');\r\n            setLname('');\r\n            setEmail('');\r\n            setPosition('');\r\n        }\r\n    }\r\n    function handleDelete(i) {\r\n        setTodos(todos.filter((todo, index) => index !== i));\r\n    }\r\n    const fetchUser = () => {\r\n        getTemplates()\r\n            .then((res) => {\r\n                console.log(res);\r\n                setData(res.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n    const handleDeleteGroup = (i) => {\r\n        deleteTemplate(i)\r\n            .then((res) => {\r\n                console.log(res);\r\n\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success!',\r\n                    text: 'Template deleted successfully!',\r\n                    showConfirmButton: true,\r\n                    timer: 2000\r\n                });\r\n                fetchUser();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                Swal.fire('Failed', err.response.data.message, 'error');\r\n            });\r\n    };\r\n\r\n    const handleImportSite = () => {\r\n        if (emailSource === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n            return;\r\n        }\r\n        let obj = {\r\n            convert_links: convertLinks,\r\n            content: emailSource\r\n        };\r\n        importEmail(obj)\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                setText(res?.data.text);\r\n                setHtml(res?.data.html);\r\n                setSubject(res?.data.subject);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                handleCheckClose();\r\n                Swal.fire('Failed', err.response.data.message, 'error');\r\n            });\r\n    };\r\n\r\n    const handleEditModal = (e, entry) => {\r\n        if (entry == 'copy') {\r\n            setCopyModal(true);\r\n            setText(e?.text);\r\n            setHtml(e?.html);\r\n            setId(e?.id);\r\n            setName(e?.name);\r\n            setSubject(e?.subject);\r\n            setEnvelopSender(e?.envelope_sender);\r\n            // setEmailSource('');\r\n            setEditData(e);\r\n        } else {\r\n            setEditModal(true);\r\n            setText(e?.text);\r\n            setHtml(e?.html);\r\n            setId(e?.id);\r\n            setName(e?.name);\r\n            setSubject(e?.subject);\r\n            setEnvelopSender(e?.envelope_sender);\r\n            // setEmailSource('');\r\n            setEditData(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchUser();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MainCard title=\"Users And Groups\">\r\n                <Card sx={{ maxWidth: 275 }} className=\"mb-3\" style={{ color: 'black' }}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" style={{ color: 'black' }} gutterBottom>\r\n                            Templates Summary\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"text.secondary\">\r\n                            Total Templates : {data?.length}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Button variant=\"contained\" className=\"mb-3\" onClick={handleOpen}>\r\n                    New Template\r\n                </Button>\r\n\r\n                <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Template Name\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n\r\n                            <Button variant=\"contained\" color=\"error\" onClick={() => setImports(!imports)}>\r\n                                Import Email\r\n                            </Button>\r\n\r\n                            {imports && (\r\n                                <>\r\n                                    {' '}\r\n                                    <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                        Email Content\r\n                                    </Typography>\r\n                                    <div class=\"col-sm-3\">\r\n                                        <textarea\r\n                                            type=\"text\"\r\n                                            class=\"form-control\"\r\n                                            placeholder=\"Raw Email Source\"\r\n                                            id=\"emailSource\"\r\n                                            value={emailSource}\r\n                                            rows=\"7\"\r\n                                            onChange={(e) => setEmailSource(e.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input\r\n                                            className=\"form-check-input\"\r\n                                            type=\"checkbox\"\r\n                                            checked={convertLinks}\r\n                                            id=\"flexCheckChecked\"\r\n                                            onChange={(e) => setConvertLinks(!convertLinks)}\r\n                                        />\r\n                                        <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                            Change Links to Point to Landing Page\r\n                                        </label>\r\n                                    </div>\r\n                                    <Button variant=\"contained\" color=\"success\" onClick={() => handleImportSite()}>\r\n                                        Save{' '}\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Envelope Sender\r\n                            </Typography>\r\n\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Address\"\r\n                                    id=\"firstName\"\r\n                                    value={envelopSender}\r\n                                    onChange={(e) => setEnvelopSender(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Subject\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Subject\"\r\n                                    id=\"lastName\"\r\n                                    value={subject}\r\n                                    onChange={(e) => setSubject(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={html}\r\n                                    onChange={(e) => setHtml(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Text\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    rows={7}\r\n                                    required\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            {/* <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Position\"\r\n                                    id=\"position\"\r\n                                    value={position}\r\n                                    onChange={(e) => setPosition(e.target.value)}\r\n                                />\r\n                            </div> */}\r\n                            {/* <Button variant=\"text\" color=\"error\" size=\"small\" onClick={handleSubmit}>\r\n                                <AddIcon fontSize=\"small\" /> Add\r\n                            </Button> */}\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    checked={trackingImage}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setTrackingImage(!trackingImage)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Add Tracking Image\r\n                                </label>\r\n                            </div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd'\r\n                                    // color: \"black\"\r\n                                }}\r\n                                onClick={handleAdd}\r\n                                fullWidth\r\n                            >\r\n                                Create Template\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n\r\n                <table className=\"table table-hover mt-4\">\r\n                    <thead class=\"thead-dark\">\r\n                        <tr>\r\n                            <td>Name</td>\r\n\r\n                            <td>Modified Date</td>\r\n                            <td>Actions</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {data?.map((e, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{e.name}</td>\r\n\r\n                                    <td>{new Date(e.modified_date).toUTCString()}</td>\r\n                                    <td>\r\n                                        {/* <DeleteIcon color=\"error\" /> */}\r\n                                        <IconButton onClick={() => handleEditModal(e, 'edit')}>\r\n                                            <EditIcon color=\"success\" />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleEditModal(e, 'copy')}>\r\n                                            <ContentCopyIcon color=\"primary\" />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleDeleteGroup(e?.id)}>\r\n                                            <DeleteIcon color=\"error\" />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Modal\r\n                    open={editModal}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Template Name\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={name}\r\n                                onChange={(e) => {\r\n                                    console.log(e.target.value);\r\n                                    setName(e.target.value);\r\n                                }}\r\n                            />\r\n\r\n                            <Button variant=\"contained\" color=\"error\" onClick={() => setImports(!imports)}>\r\n                                Import Email\r\n                            </Button>\r\n\r\n                            {imports && (\r\n                                <>\r\n                                    {' '}\r\n                                    <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                        Email Content\r\n                                    </Typography>\r\n                                    <div class=\"col-sm-3\">\r\n                                        <textarea\r\n                                            type=\"text\"\r\n                                            class=\"form-control\"\r\n                                            placeholder=\"Raw Email Source\"\r\n                                            id=\"emailSource\"\r\n                                            value={emailSource}\r\n                                            rows=\"7\"\r\n                                            onChange={(e) => setEmailSource(e.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input\r\n                                            className=\"form-check-input\"\r\n                                            type=\"checkbox\"\r\n                                            value={convertLinks}\r\n                                            id=\"flexCheckChecked\"\r\n                                            onChange={(e) => setConvertLinks(e.target.checked)}\r\n                                        />\r\n                                        <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                            Change Links to Point to Landing Page\r\n                                        </label>\r\n                                    </div>\r\n                                    <Button variant=\"contained\" color=\"success\" onClick={() => handleImportSite()}>\r\n                                        Save{' '}\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Envelope Sender\r\n                            </Typography>\r\n\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Address\"\r\n                                    id=\"firstName\"\r\n                                    value={envelopSender}\r\n                                    onChange={(e) => setEnvelopSender(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Subject\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Subject\"\r\n                                    id=\"lastName\"\r\n                                    value={subject}\r\n                                    onChange={(e) => setSubject(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={html}\r\n                                    onChange={(e) => setHtml(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Text\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    rows={7}\r\n                                    required\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            {/* <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Position\"\r\n                                    id=\"position\"\r\n                                    value={position}\r\n                                    onChange={(e) => setPosition(e.target.value)}\r\n                                />\r\n                            </div> */}\r\n                            {/* <Button variant=\"text\" color=\"error\" size=\"small\" onClick={handleSubmit}>\r\n                                <AddIcon fontSize=\"small\" /> Add\r\n                            </Button> */}\r\n                            {/* <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    value={trackingImage}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setTrackingImage(e.target.checked)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Add Tracking Image\r\n                                </label>\r\n                            </div> */}\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd'\r\n                                    // color: \"black\"\r\n                                }}\r\n                                onClick={handleEdit}\r\n                                fullWidth\r\n                            >\r\n                                Update Template\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    open={copyModal}\r\n                    onClose={() => {\r\n                        setCopyModal(false);\r\n                    }}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Template Name\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={name}\r\n                                onChange={(e) => {\r\n                                    console.log(e.target.value);\r\n                                    setName(e.target.value);\r\n                                }}\r\n                            />\r\n\r\n                            <Button variant=\"contained\" color=\"error\" onClick={() => setImports(!imports)}>\r\n                                Import Email\r\n                            </Button>\r\n\r\n                            {imports && (\r\n                                <>\r\n                                    {' '}\r\n                                    <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                        Email Content\r\n                                    </Typography>\r\n                                    <div class=\"col-sm-3\">\r\n                                        <textarea\r\n                                            type=\"text\"\r\n                                            class=\"form-control\"\r\n                                            placeholder=\"Raw Email Source\"\r\n                                            id=\"emailSource\"\r\n                                            value={emailSource}\r\n                                            rows=\"7\"\r\n                                            onChange={(e) => setEmailSource(e.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input\r\n                                            className=\"form-check-input\"\r\n                                            type=\"checkbox\"\r\n                                            value={convertLinks}\r\n                                            id=\"flexCheckChecked\"\r\n                                            onChange={(e) => setConvertLinks(e.target.checked)}\r\n                                        />\r\n                                        <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                            Change Links to Point to Landing Page\r\n                                        </label>\r\n                                    </div>\r\n                                    <Button variant=\"contained\" color=\"success\" onClick={() => handleImportSite()}>\r\n                                        Save{' '}\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Envelope Sender\r\n                            </Typography>\r\n\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Address\"\r\n                                    id=\"firstName\"\r\n                                    value={envelopSender}\r\n                                    onChange={(e) => setEnvelopSender(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Subject\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Email Subject\"\r\n                                    id=\"lastName\"\r\n                                    value={subject}\r\n                                    onChange={(e) => setSubject(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={html}\r\n                                    onChange={(e) => setHtml(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Text\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Plain Text\"\r\n                                    id=\"email\"\r\n                                    rows={7}\r\n                                    required\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            {/* <div class=\"col-sm-3\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"Position\"\r\n                                    id=\"position\"\r\n                                    value={position}\r\n                                    onChange={(e) => setPosition(e.target.value)}\r\n                                />\r\n                            </div> */}\r\n                            {/* <Button variant=\"text\" color=\"error\" size=\"small\" onClick={handleSubmit}>\r\n                                <AddIcon fontSize=\"small\" /> Add\r\n                            </Button> */}\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    value={trackingImage}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setTrackingImage(e.target.checked)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Add Tracking Image\r\n                                </label>\r\n                            </div>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd'\r\n                                    // color: \"black\"\r\n                                }}\r\n                                onClick={handleAdd}\r\n                                fullWidth\r\n                            >\r\n                                Create Template\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n            </MainCard>\r\n        </>\r\n    );\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;"],"sourceRoot":""}