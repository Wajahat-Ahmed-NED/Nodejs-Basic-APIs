{"version":3,"sources":["pages/extra-pages/LandingPage.js"],"names":["style","position","top","left","transform","width","bgcolor","color","maxHeight","boxShadow","p","overflowX","overflowY","LandingPage","React","useState","open","setOpen","imports","setImport","editModal","setEditModal","copyModal","setCopyModal","name","setName","textUrl","setTextUrl","text","setText","id","setId","data","setData","editData","setEditData","captureData","setCaptureData","redirectURL","setRedirectURL","handleClose","handleCheckClose","handleAdd","Swal","fire","obj","capture_credentials","capture_passwords","redirect_url","console","log","createPage","then","res","icon","title","showConfirmButton","timer","fetchUser","catch","err","response","message","stringToHtml","htmlString","sanitizedHtml","DOMPurify","sanitize","dangerouslySetInnerHTML","__html","getPages","handleEditModal","e","entry","html","useEffect","sx","maxWidth","className","variant","gutterBottom","component","length","onClick","onClose","m","noValidate","autoComplete","label","size","onChange","target","value","class","type","placeholder","required","rows","include_resources","url","importSite","handleImportSite","checked","htmlFor","backgroundColor","marginRight","map","i","Date","modified_date","toLocaleDateString","deletePage","handleDeleteGroup","editPage"],"mappings":"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","file":"static/js/20.0d8a34e8.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Typography, Button, Modal, Box, TextField, Card, CardContent, CardActions, IconButton } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\n\r\nimport DOMPurify from 'dompurify';\r\nimport {\r\n    createGroup,\r\n    createPage,\r\n    createTemplate,\r\n    deleteGroup,\r\n    deletePage,\r\n    editPage,\r\n    getGroups,\r\n    getGroupsSummary,\r\n    getPages,\r\n    getTemplates,\r\n    importSite\r\n} from 'api/api';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '33%',\r\n    bgcolor: 'rgb(36, 41, 57)',\r\n    color: 'white !important',\r\n    maxHeight: '600px',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    overflowX: 'hidden',\r\n    overflowY: 'auto'\r\n    // minHeight: \"400px\",\r\n    // maxHeight: \"600px\",\r\n};\r\nexport default function LandingPage() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [imports, setImport] = React.useState(false);\r\n    const [editModal, setEditModal] = React.useState(false);\r\n    const [copyModal, setCopyModal] = React.useState(false);\r\n    const [name, setName] = React.useState('');\r\n    const [textUrl, setTextUrl] = React.useState('');\r\n    const [todos, setTodos] = useState([]);\r\n    const [envelopSender, setEnvelopSender] = useState('');\r\n    const [subject, setSubject] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [id, setId] = useState(0);\r\n    const [position, setPosition] = useState('');\r\n    const [data, setData] = React.useState([]);\r\n    const [groupSummary, setGroupSummary] = React.useState([]);\r\n    const [editData, setEditData] = React.useState({});\r\n    const [captureData, setCaptureData] = React.useState(true);\r\n    const [redirectURL, setRedirectURL] = React.useState('');\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setEditModal(false);\r\n        setText('');\r\n        setId(0);\r\n        setName('');\r\n        setEditData({});\r\n        setCopyModal(false);\r\n    };\r\n    const handleCheckClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleEdit = () => {\r\n        setEditModal(false);\r\n        if (name === '' || text === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n        } else {\r\n            let obj = {\r\n                ...editData,\r\n                name: name,\r\n                html: text,\r\n                capture_credentials: captureData ? true : false,\r\n                capture_passwords: captureData ? true : false,\r\n                redirect_url: redirectURL\r\n            };\r\n            console.log(obj);\r\n            console.log(typeof id);\r\n            editPage(obj, id)\r\n                .then((res) => {\r\n                    console.log(res);\r\n\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success!',\r\n                        text: 'Page Updated Successfully!',\r\n                        showConfirmButton: true,\r\n                        timer: 2000\r\n                    });\r\n                    fetchUser();\r\n                    handleClose();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    handleCheckClose();\r\n                    Swal.fire('Failed', err.response.data.message, 'error');\r\n                });\r\n        }\r\n    };\r\n    const handleAdd = () => {\r\n        setOpen(false);\r\n\r\n        if (name === '' || text === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n        } else {\r\n            let obj = {\r\n                name: name,\r\n                text: text,\r\n                capture_credentials: captureData ? true : false,\r\n                capture_passwords: captureData ? true : false,\r\n                redirect_url: redirectURL\r\n            };\r\n            console.log(obj);\r\n            createPage(obj)\r\n                .then((res) => {\r\n                    console.log(res);\r\n\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success!',\r\n                        text: 'Page created successfully!',\r\n                        showConfirmButton: true,\r\n                        timer: 2000\r\n                    });\r\n                    fetchUser();\r\n                    handleClose();\r\n                    setImport(false);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    handleCheckClose();\r\n                    Swal.fire('Failed', err.response.data.message, 'error');\r\n                });\r\n        }\r\n    };\r\n\r\n    function stringToHtml(htmlString) {\r\n        const sanitizedHtml = DOMPurify.sanitize(htmlString);\r\n        return <div id=\"summary1\" dangerouslySetInnerHTML={{ __html: sanitizedHtml }} />;\r\n    }\r\n\r\n    const handleImportSite = () => {\r\n        if (textUrl === '') {\r\n            Swal.fire('Invalid Data', 'Fill all fields!', 'error');\r\n            setOpen(true);\r\n            return;\r\n        }\r\n        let obj = {\r\n            include_resources: false,\r\n            url: textUrl\r\n        };\r\n        importSite(obj)\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                setText(res?.data.html);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                handleCheckClose();\r\n                Swal.fire('Failed', err.response.data.message, 'error');\r\n            });\r\n    };\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (fname !== '' || lname !== '' || email !== '' || position !== '') {\r\n            let todo = { first_name: fname, last_name: lname, email: email, position: position };\r\n\r\n            setTodos([...todos, todo]);\r\n            setFname('');\r\n            setLname('');\r\n            setEmail('');\r\n            setPosition('');\r\n        }\r\n    }\r\n    function handleDelete(i) {\r\n        setTodos(todos.filter((todo, index) => index !== i));\r\n    }\r\n    const fetchUser = () => {\r\n        getPages()\r\n            .then((res) => {\r\n                console.log(res);\r\n                setData(res.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n    const handleDeleteGroup = (i) => {\r\n        deletePage(i)\r\n            .then((res) => {\r\n                console.log(res);\r\n\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success!',\r\n                    text: 'Page deleted successfully!',\r\n                    showConfirmButton: true,\r\n                    timer: 2000\r\n                });\r\n                fetchUser();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                Swal.fire('Failed', err.response.data.message, 'error');\r\n            });\r\n    };\r\n\r\n    const handleEditModal = (e, entry) => {\r\n        if (entry == 'copy') {\r\n            setCopyModal(true);\r\n            setName(e?.name);\r\n            setText(e?.html);\r\n            setId(e?.id);\r\n            setEditData(e);\r\n        } else {\r\n            setEditModal(true);\r\n            setName(e?.name);\r\n            setText(e?.html);\r\n            setId(e?.id);\r\n            setEditData(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchUser();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MainCard title=\"Users And Groups\">\r\n                <Card sx={{ maxWidth: 275 }} className=\"mb-3\" style={{ color: 'black' }}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\" style={{ color: 'black' }} gutterBottom>\r\n                            Landing Page Summary\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"text.secondary\">\r\n                            Total Pages : {data?.length}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Button variant=\"contained\" className=\"mb-3\" onClick={handleOpen}>\r\n                    New Page\r\n                </Button>\r\n\r\n                <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Landing Page\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                            <Button variant=\"contained\" color=\"error\" onClick={() => setImport(!imports)}>\r\n                                Import Site\r\n                            </Button>\r\n\r\n                            {imports && (\r\n                                <>\r\n                                    <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                        Enter URL\r\n                                    </Typography>\r\n                                    <div class=\"col-sm-3\">\r\n                                        <textarea\r\n                                            type=\"email\"\r\n                                            class=\"form-control\"\r\n                                            placeholder=\"http://google.com\"\r\n                                            id=\"url\"\r\n                                            required\r\n                                            rows={1}\r\n                                            value={textUrl}\r\n                                            onChange={(e) => setTextUrl(e.target.value)}\r\n                                        />\r\n                                        <Button variant=\"contained\" color=\"success\" onClick={() => handleImportSite()}>\r\n                                            Save{' '}\r\n                                        </Button>\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"HTML\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Rendered HTML\r\n                            </Typography>\r\n                            {text && stringToHtml(text)}\r\n\r\n                            <br />\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Redirect URL\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Redirect URL\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={redirectURL}\r\n                                onChange={(e) => setRedirectURL(e.target.value)}\r\n                            />\r\n\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    checked={captureData}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setCaptureData(!captureData)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Capture Submitted Data\r\n                                </label>\r\n                            </div>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd',\r\n                                    // color: \"black\"\r\n                                    marginRight: '-20px'\r\n                                }}\r\n                                onClick={handleAdd}\r\n                                // fullWidth\r\n                            >\r\n                                Create Page\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n\r\n                <table className=\"table table-hover mt-4\">\r\n                    <thead class=\"thead-dark\">\r\n                        <tr>\r\n                            <td>Name</td>\r\n                            <td>Redirect URL</td>\r\n                            <td>Captured Credentials</td>\r\n                            <td>Captured Password</td>\r\n                            <td>Modified Date</td>\r\n                            <td>Actions</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {data?.map((e, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{e.name}</td>\r\n                                    <td>{e.redirect_url !== '' ? e.redirect_url : 'None'}</td>\r\n                                    <td>{e.capture_credentials === false ? 'False' : 'True'}</td>\r\n                                    <td>{e.capture_passwords === false ? 'False' : 'True'}</td>\r\n                                    <td>{new Date(e.modified_date).toLocaleDateString()}</td>\r\n                                    <td>\r\n                                        {/* <EditIcon color=\"success\" /> */}\r\n                                        <IconButton onClick={() => handleEditModal(e, 'edit')}>\r\n                                            <EditIcon color=\"success\" />\r\n                                            {/* <DeleteIcon color=\"error\" /> */}\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleEditModal(e, 'copy')}>\r\n                                            <ContentCopyIcon color=\"primary\" />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleDeleteGroup(e?.id)}>\r\n                                            <DeleteIcon color=\"error\" />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Modal\r\n                    open={editModal}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Landing Page\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"HTML\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Rendered HTML\r\n                            </Typography>\r\n                            {text && stringToHtml(text)}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Redirect URL\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Redirect URL\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={redirectURL || editData.redirect_url}\r\n                                onChange={(e) => setRedirectURL(e.target.value)}\r\n                            />\r\n\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    checked={editData.capture_credentials}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setCaptureData(!editData.capture_credentials)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Capture Submitted Data\r\n                                </label>\r\n                            </div>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd',\r\n                                    // color: \"black\"\r\n                                    marginRight: '-20px'\r\n                                }}\r\n                                onClick={handleEdit}\r\n                                // fullWidth\r\n                            >\r\n                                Update Page\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    open={copyModal}\r\n                    onClose={() => {\r\n                        setCopyModal(false);\r\n                    }}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box sx={style}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { m: 1, width: '41ch' }\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Name\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Landing Page\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                HTML\r\n                            </Typography>\r\n                            <div class=\"col-sm-3\">\r\n                                <textarea\r\n                                    type=\"email\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"HTML\"\r\n                                    id=\"email\"\r\n                                    required\r\n                                    rows={7}\r\n                                    value={text}\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Rendered HTML\r\n                            </Typography>\r\n                            {text && stringToHtml(text)}\r\n\r\n                            <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                                Redirect URL\r\n                            </Typography>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                label=\"Redirect URL\"\r\n                                variant=\"outlined\"\r\n                                style={{ color: 'black' }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                value={redirectURL || editData.redirect_url}\r\n                                onChange={(e) => setRedirectURL(e.target.value)}\r\n                            />\r\n\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    checked={editData.capture_credentials}\r\n                                    id=\"flexCheckChecked\"\r\n                                    onChange={(e) => setCaptureData(!editData.capture_credentials)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexCheckChecked\">\r\n                                    Capture Submitted Data\r\n                                </label>\r\n                            </div>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    backgroundColor: '#70d8bd',\r\n                                    // color: \"black\"\r\n                                    marginRight: '-20px'\r\n                                }}\r\n                                onClick={handleAdd}\r\n                                // fullWidth\r\n                            >\r\n                                Create Page\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Modal>\r\n            </MainCard>\r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}