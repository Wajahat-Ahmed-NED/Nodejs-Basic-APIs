{"version":3,"sources":["pages/management/user.js"],"names":["User","useState","data","setData","getFetch","axios","get","process","REACT_APP_BACKEND_API","then","res","users","console","log","catch","err","window","alert","useEffect","modal","setModal","handleModal","email","setEmail","password","setPassword","confirmpassword","setCPassword","name","setName","title","variant","onClick","open","onClose","style","height","className","component","label","value","inputProps","color","onChange","event","target","fullWidth","type","user","username","post","Swal","fire","icon","text","showConfirmButton","error","response","message","jsx","length","map","e","i","id","_id","delete"],"mappings":"6OAgReA,UApQF,WAGT,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAW,WACbC,IACKC,IADL,UACYC,8JAAYC,sBADxB,kBAEKC,MAAK,SAACC,GACHP,EAAQO,EAAIR,KAAKS,OAEjBC,QAAQC,IAAIH,EAAIR,KAAKS,UAExBG,OAAM,SAACC,GACJC,OAAOC,MAAM,2BAErBL,QAAQC,IAAIX,IAEhBgB,qBAAU,WAGNd,MACD,IACH,MAA0BH,oBAAS,GAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KAIMC,EAAc,WAChBD,GAAUD,IAEd,EAA0BlB,mBAAS,IAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAgCtB,mBAAS,IAAzC,mBAAOuB,EAAP,KAAiBC,EAAjB,KACA,EAAwCxB,mBAAS,IAAjD,mBAAOyB,EAAP,KAAwBC,EAAxB,KAEA,EAAwB1B,mBAAS,IAAjC,mBAAO2B,EAAP,KAAaC,EAAb,KACA,EAAwC5B,oBAAS,GAAjD,mBACA,GADA,UAC4CA,oBAAS,IAArD,6BA8FA,OACI,mCACI,eAAC,IAAD,CAAU6B,MAAM,kBAAhB,UACI,cAAC,IAAD,CAAQC,QAAQ,YAAYC,QAASX,EAArC,yBAGA,cAAC,IAAD,CAAOY,KAAMd,EAAOe,QAASb,EAA7B,SACI,sBACIc,MAAO,CACHC,OAAQ,SAEZC,UAAU,kBAJd,UAMI,cAAC,IAAD,CAAYN,QAAQ,KAAKO,UAAU,KAAKD,UAAU,OAAlD,yBAGA,cAAC,IAAD,CACIE,MAAM,OACNC,MAAOZ,EACPa,WAAY,CAAEN,MAAO,CAAEO,MAAO,UAC9BC,SAxGC,SAACC,GACtBf,EAAQe,EAAMC,OAAOL,QAwGDM,WAAS,IAEb,uBACA,cAAC,IAAD,CACIP,MAAM,WACNC,MAAOlB,EACPmB,WAAY,CAAEN,MAAO,CAAEO,MAAO,UAC9BC,SA7GE,SAACC,GACvBrB,EAASqB,EAAMC,OAAOL,QA6GFM,WAAS,IAEb,uBACA,cAAC,IAAD,CACIC,KAAK,WACLR,MAAM,WACNC,MAAOhB,EACPiB,WAAY,CAAEN,MAAO,CAAEO,MAAO,UAC9BC,SAnHK,SAACC,GAC1BnB,EAAYmB,EAAMC,OAAOL,QAmHLM,WAAS,IAEb,uBACA,cAAC,IAAD,CACIC,KAAK,WACLR,MAAM,mBACNC,MAAOd,EACPe,WAAY,CAAEN,MAAO,CAAEO,MAAO,UAC9BC,SAzHM,SAACC,GAC3BjB,EAAaiB,EAAMC,OAAOL,QAyHNM,WAAS,IAEb,uBAWA,uBACA,cAAC,IAAD,CAAQA,WAAS,EAACf,QAAQ,YAAYC,QA5HjC,WACrB,GAAKV,GAAUE,GAAaI,GAASF,EAGjC,GAAIF,GAAYE,EAAiB,CAC7B,IAAMsB,EAAO,CACTC,SAAU3B,EACVE,WACAI,QAWJvB,IACK6C,KADL,UACa3C,8JAAYC,sBADzB,yCAEWwC,IAENvC,MAAK,SAACC,GACHyC,IAAKC,KAAK,CACNC,KAAM,UACNvB,MAAO,WACPwB,KAAM,6BACNC,mBAAmB,IAEvBnD,IACAgB,GAAUD,MAGbL,OAAM,SAAC0C,GACJ5C,QAAQC,IAAI,QAAS2C,EAAMC,UAC3BN,IAAKC,KAAK,OAAQI,EAAMC,SAASvD,KAAKwD,QAAS,iBAGvD1C,OAAOC,MAAM,mDArCjBD,OAAOC,MAAM,gCA0HD,8BAMR,uBAAO0C,KAAG,EAAV,umBAgBA,wBAAOtB,UAAU,yBAAjB,UACI,uBAAOA,UAAU,aAAjB,SACI,+BACI,sCACA,sCACA,0CACA,6CAKR,iCACS,OAAJnC,QAAI,IAAJA,OAAA,EAAAA,EAAM0D,QAAS,IAAf,OACG1D,QADH,IACGA,OADH,EACGA,EAAM2D,KAAI,SAACC,EAAGC,GACV,OACI,+BACI,6BAAKA,EAAI,IACT,6BAAKD,EAAElC,OACP,6BAAKkC,EAAEb,WACP,6BACI,cAAC,IAAD,CAAQP,MAAM,QAAQX,QAAQ,WAAWC,QAAS,kBA1HhEgC,EA0HuFF,EAAEG,SAzH/G5D,IACK6D,OADL,UACe3D,8JAAYC,sBAD3B,6BACqEwD,IAChEvD,MAAK,SAACgD,GACHN,IAAKC,KAAK,CACNC,KAAM,UACNvB,MAAO,WACPwB,KAAM,6BACNC,mBAAmB,IAEvBnD,OAEHU,OAAM,SAAC0C,GAEJL,IAAKC,KAAK,OAAQI,EAAMC,SAASvD,KAAKwD,QAAS,SAE/C9C,QAAQC,IAAI2C,MAhBC,IAACQ,GA0Hc,wBALCD","file":"static/js/24.bc4ab149.chunk.js","sourcesContent":["// project import\r\nimport MainCard from 'components/MainCard';\r\nimport { useEffect, useState } from 'react';\r\nimport { Typography, Button, Box, TextField, Select, MenuItem, IconButton } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { EditOutlined, ProfileOutlined, LogoutOutlined, UserOutlined, WalletOutlined } from '@ant-design/icons';\r\nimport { Modal, Checkbox } from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n// ==============================|| SAMPLE PAGE ||============================== //\r\n//const [userData, setUserData] = useState([]);\r\nconst User = () => {\r\n    //const [userData, setUserData] = useState([]);\r\n\r\n    const [data, setData] = useState([]);\r\n    const getFetch = () => {\r\n        axios\r\n            .get(`${process.env.REACT_APP_BACKEND_API}:1338/getUser`)\r\n            .then((res) => {\r\n                setData(res.data.users);\r\n                // console.log(userData);\r\n                console.log(res.data.users);\r\n            })\r\n            .catch((err) => {\r\n                window.alert('Something went wrong');\r\n            });\r\n        console.log(data);\r\n    };\r\n    useEffect(() => {\r\n        // setData(JSON.parse(localStorage.getItem('Users')));\r\n        // console.log(JSON.parse(localStorage.getItem('Users')));\r\n        getFetch();\r\n    }, []);\r\n    const [modal, setModal] = useState(false);\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n    const handleModal = () => {\r\n        setModal(!modal);\r\n    };\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmpassword, setCPassword] = useState('');\r\n\r\n    const [name, setName] = useState('');\r\n    const [wazuhChecked, setWazuhChecked] = useState(false);\r\n    const [gophishChecked, setGophishChecked] = useState(false);\r\n\r\n    //   const handleOpen = () => {\r\n    //     setOpen(true);\r\n    //   };\r\n\r\n    //   const handleClose = () => {\r\n    //     setOpen(false);\r\n    //   };\r\n\r\n    const handleNameChange = (event) => {\r\n        setName(event.target.value);\r\n    };\r\n    const handleEmailChange = (event) => {\r\n        setEmail(event.target.value);\r\n    };\r\n    const handlePasswordChange = (event) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleCPasswordChange = (event) => {\r\n        setCPassword(event.target.value);\r\n    };\r\n\r\n    const handleWazuhChange = (event) => {\r\n        setWazuhChecked(event.target.checked);\r\n    };\r\n\r\n    const handleGophishChange = (event) => {\r\n        setGophishChecked(event.target.checked);\r\n    };\r\n\r\n    const handleCreateUser = () => {\r\n        if (!email || !password || !name || !confirmpassword) {\r\n            window.alert('Please fill all the details');\r\n        } else {\r\n            if (password == confirmpassword) {\r\n                const user = {\r\n                    username: email,\r\n                    password,\r\n                    name\r\n                    // wazuh: wazuhChecked,\r\n                    // gophish: gophishChecked,\r\n                    // type: 'user'\r\n                };\r\n                // let existingUsers = JSON.parse(localStorage.getItem('Users'));\r\n                // existingUsers ? existingUsers.push(user) : (existingUsers = [user]);\r\n                // localStorage.setItem('Users', JSON.stringify(existingUsers));\r\n                // console.log(user);\r\n                // setModal(false);\r\n\r\n                axios\r\n                    .post(`${process.env.REACT_APP_BACKEND_API}:1338/createPortalUser`, {\r\n                        ...user\r\n                    })\r\n                    .then((res) => {\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Success!',\r\n                            text: 'User Created successfully!',\r\n                            showConfirmButton: true\r\n                        });\r\n                        getFetch();\r\n                        setModal(!modal);\r\n                        // Swal.fire(res.data, 'Fill all fields!', 'error');\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('error', error.response);\r\n                        Swal.fire('Oops', error.response.data.message, 'error');\r\n                    });\r\n            } else {\r\n                window.alert('Password and Confirm Password must be same');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteUser = (id) => {\r\n        axios\r\n            .delete(`${process.env.REACT_APP_BACKEND_API}:1338/deleteUsers/${id}`)\r\n            .then((response) => {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success!',\r\n                    text: 'User Deleted Successfully!',\r\n                    showConfirmButton: true\r\n                });\r\n                getFetch();\r\n            })\r\n            .catch((error) => {\r\n                // alert('Error');\r\n                Swal.fire('Oops', error.response.data.message, 'error');\r\n\r\n                console.log(error);\r\n            });\r\n    };\r\n    return (\r\n        <>\r\n            <MainCard title=\"User Management\">\r\n                <Button variant=\"contained\" onClick={handleModal}>\r\n                    Create User\r\n                </Button>\r\n                <Modal open={modal} onClose={handleModal}>\r\n                    <div\r\n                        style={{\r\n                            height: '500px'\r\n                        }}\r\n                        className=\"modal-container\"\r\n                    >\r\n                        <Typography variant=\"h4\" component=\"h2\" className=\"my-2\">\r\n                            Create User\r\n                        </Typography>\r\n                        <TextField\r\n                            label=\"Name\"\r\n                            value={name}\r\n                            inputProps={{ style: { color: 'black' } }}\r\n                            onChange={handleNameChange}\r\n                            fullWidth\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            value={email}\r\n                            inputProps={{ style: { color: 'black' } }}\r\n                            onChange={handleEmailChange}\r\n                            fullWidth\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            type=\"Password\"\r\n                            label=\"Password\"\r\n                            value={password}\r\n                            inputProps={{ style: { color: 'black' } }}\r\n                            onChange={handlePasswordChange}\r\n                            fullWidth\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            type=\"Password\"\r\n                            label=\"Confirm Password\"\r\n                            value={confirmpassword}\r\n                            inputProps={{ style: { color: 'black' } }}\r\n                            onChange={handleCPasswordChange}\r\n                            fullWidth\r\n                        />\r\n                        <br />\r\n\r\n                        {/* <Typography variant=\"h4\" component=\"h2\" className=\"my-2\">\r\n                            Select Services\r\n                        </Typography>\r\n                        <div>\r\n                            <Checkbox checked={wazuhChecked} onChange={handleWazuhChange} name=\"wazuh\" />\r\n                            Wazuh\r\n                            <Checkbox checked={gophishChecked} onChange={handleGophishChange} name=\"gophish\" />\r\n                            Gophish\r\n                        </div> */}\r\n                        <br />\r\n                        <Button fullWidth variant=\"contained\" onClick={handleCreateUser}>\r\n                            Create User\r\n                        </Button>\r\n                    </div>\r\n                </Modal>\r\n\r\n                <style jsx>{`\r\n                    .modal-container {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        align-items: start;\r\n                        justify-content: center;\r\n                        background-color: #fff;\r\n                        color: black;\r\n                        padding: 20px;\r\n                        width: 500px;\r\n                        height: 300px;\r\n                        margin: 20px auto;\r\n                        outline: none;\r\n                        border-radius: 5px;\r\n                    }\r\n                `}</style>\r\n                <table className=\"table table-hover mt-4\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <td>S.No</td>\r\n                            <td>Name</td>\r\n                            <td>Username</td>\r\n                            <td>Action</td>\r\n                            {/* <td>Resources</td>\r\n                            <td>GoPhish API Key</td> */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {data?.length > 0 &&\r\n                            data?.map((e, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{i + 1}</td>\r\n                                        <td>{e.name}</td>\r\n                                        <td>{e.username}</td>\r\n                                        <td>\r\n                                            <Button color=\"error\" variant=\"outlined\" onClick={() => handleDeleteUser(e._id)}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </td>\r\n                                        {/* <td>\r\n                                            <ul>\r\n                                               \r\n                                                {e.gophish && <li>Gophish</li>}\r\n                                            </ul>\r\n                                        </td>\r\n                                        <td>{e.gophishapikey}</td> */}\r\n                                        {/* <td>\r\n                                            <IconButton onClick={() => alert('Edited Successfully But No Backend')}>\r\n                                                <EditIcon color=\"success\" />\r\n                                            </IconButton>\r\n                                            <IconButton onClick={() => alert('Deleted Successfully But No Backend')}>\r\n                                                <DeleteIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                        </td> */}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                    </tbody>\r\n                </table>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\nexport default User;\r\n"],"sourceRoot":""}