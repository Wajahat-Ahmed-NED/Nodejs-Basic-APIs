{"version":3,"sources":["pages/extra-pages/report.js","pages/dashboard/OrdersTable.js","pages/dashboard/IncomeAreaChart.js","components/cards/statistics/AnalyticEcommerce.js"],"names":["Report","useState","wazuhData","setWazuhData","activewazuhData","setActiveWazuhData","disconnectedwazuhData","setDisconnectedWazuhData","neverconnectedwazuhData","setNeverconnectedWazuhData","setOpen","windows","setWindows","linux","setLinux","body","setBody","pieChart","setPieChart","barChart","setBarChart","useEffect","console","log","JSON","parse","localStorage","getItem","length","filter","e","status","os","platform","title","style","color","container","rowSpacing","columnSpacing","item","xs","sm","md","lg","variant","sx","maxWidth","id","data","labels","datasets","label","backgroundColor","borderWidth","height","width","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","legend","fontSize","className","marginTop","type","series","name","colors","theme","mode","xaxis","tickPlacement","categories","yaxis","formatter","val","reports","onClick","window","open","createData","trackingNo","fat","carbs","protein","headCells","align","disablePadding","OrderTableHead","order","orderBy","TableHead","TableRow","map","headCell","TableCell","padding","sortDirection","OrderTable","selected","newData","setNewData","changeNewData","setChangeNewData","showReport","isSelected","indexOf","Grid","outline","boxShadow","placeholder","onChange","event","searched","target","value","toLowerCase","replace","search","lastKeepAlive","ip","toString","dateAdd","Box","TableContainer","overflowX","position","display","whiteSpace","Table","pl","pr","undefined","TableBody","row","index","isItemSelected","hover","role","border","tabIndex","textTransform","areaChartOptions","chart","toolbar","show","dataLabels","enabled","stroke","curve","grid","strokeDashArray","IncomeAreaChart","slot","useTheme","palette","text","primary","secondary","line","divider","setOptions","prevState","main","axisBorder","tickAmount","borderColor","tooltip","setSeries","AnalyticEcommerce","count","percentage","isLoss","fontColor","extra","contentSX","p","spacing","alignItems","fontWeight","icon","ml","size","defaultProps"],"mappings":"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","file":"static/js/7.9d57ec84.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Typography, Button, Stack, Box } from '@mui/material';\r\nimport { Doughnut, ArcElement, Tooltip, Title } from 'react-chartjs-2';\r\n// project import\r\nimport OrdersTable from '../dashboard/OrdersTable';\r\n// import MainCard from 'components/MainCard';\r\n// import AnalyticEcommerce from 'components/cards/statistics/AnalyticEcommerce';\r\n\r\n// assets\r\nimport { useEffect } from 'react';\r\nimport { WazuhIntegration } from '../../api/api';\r\nimport MainCard from '../../components/MainCard';\r\nimport AnalyticEcommerce from '../../components/cards/statistics/AnalyticEcommerce';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport IncomeAreaChart from 'pages/dashboard/IncomeAreaChart';\r\nimport OrderTable from '../dashboard/OrdersTable';\r\nimport Chart from 'react-apexcharts';\r\n\r\n//card\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { CardActionArea } from '@mui/material';\r\n\r\n// avatar style\r\nconst avatarSX = {\r\n    width: 36,\r\n    height: 36,\r\n    fontSize: '1rem'\r\n};\r\n\r\n// action style\r\nconst actionSX = {\r\n    mt: 0.75,\r\n    ml: 1,\r\n    top: 'auto',\r\n    right: 'auto',\r\n    alignSelf: 'flex-start',\r\n    transform: 'none'\r\n};\r\n\r\n// sales report status\r\nconst status = [\r\n    {\r\n        value: 'today',\r\n        label: 'Today'\r\n    },\r\n    {\r\n        value: 'month',\r\n        label: 'This Month'\r\n    },\r\n    {\r\n        value: 'year',\r\n        label: 'This Year'\r\n    }\r\n];\r\n\r\n// ==============================|| DASHBOARD - DEFAULT ||============================== //\r\n\r\nconst series = [44, 55, 41, 17, 15];\r\nconst options = {\r\n    plotOptions: {\r\n        pie: {\r\n            customScale: 0.9\r\n        }\r\n    },\r\n    chart: {\r\n        type: 'donut'\r\n    },\r\n    responsive: [\r\n        {\r\n            breakpoint: 300,\r\n            options: {\r\n                chart: {\r\n                    width: 100\r\n                },\r\n                legend: {\r\n                    position: 'bottom'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    labels: ['Active', 'Disconnected', 'Never Connected'],\r\n    colors: ['#1890ff', '#EE280E', '#CF7D00']\r\n};\r\nconst osOptions = {\r\n    chart: {\r\n        type: 'bar'\r\n    },\r\n    plotOptions: {\r\n        bar: {\r\n            distributed: true\r\n        }\r\n    },\r\n    series: [\r\n        {\r\n            data: [\r\n                {\r\n                    x: 'category A',\r\n                    y: 10\r\n                },\r\n                {\r\n                    x: 'category B',\r\n                    y: 18\r\n                },\r\n                {\r\n                    x: 'category C',\r\n                    y: 13\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nconst Report = () => {\r\n    const [wazuhData, setWazuhData] = useState([]);\r\n    const [activewazuhData, setActiveWazuhData] = useState([]);\r\n    const [disconnectedwazuhData, setDisconnectedWazuhData] = useState([]);\r\n    const [neverconnectedwazuhData, setNeverconnectedWazuhData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [series, setSeries] = useState([]);\r\n    const [windows, setWindows] = useState([]);\r\n    const [linux, setLinux] = useState([]);\r\n    const [body, setBody] = useState([]);\r\n    const [slot, setSlot] = useState('week');\r\n    const [pieChart, setPieChart] = useState(false);\r\n    const [barChart, setBarChart] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOpen(true);\r\n        console.log(JSON.parse(localStorage.getItem('userdata')));\r\n        // const data=\r\n        setBody(JSON.parse(localStorage.getItem('userdata')));\r\n    }, []);\r\n    useEffect(() => {\r\n        if (body?.body?.length > 0) {\r\n            console.log(body?.body);\r\n            setWazuhData(body?.body);\r\n            setActiveWazuhData(body?.body?.filter((e) => e.status === 'active'));\r\n            setDisconnectedWazuhData(body?.body?.filter((e) => e.status === 'disconnected'));\r\n            setNeverconnectedWazuhData(body?.body?.filter((e) => e.status === 'neverconnected'));\r\n            setWindows(body?.body?.filter((e) => e.os.platform === 'windows'));\r\n            setLinux(body?.body?.filter((e) => e.os.platform === 'ubuntu'));\r\n            setOpen(false);\r\n        }\r\n    }, [body]);\r\n    useEffect(() => {\r\n        setPieChart(true);\r\n        console.log(activewazuhData);\r\n    }, [disconnectedwazuhData]);\r\n\r\n    useEffect(() => {\r\n        console.log(windows);\r\n        setBarChart(true);\r\n    }, [windows]);\r\n\r\n    const handleWazuhOpen = () => {\r\n        window.open('https://172.168.10.71/');\r\n    };\r\n    return (\r\n        <>\r\n            <MainCard title=\"SIEM\" style={{ color: 'black ' }}>\r\n                <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                    {/* row 1 */}\r\n                    <Grid item xs={6} sm={3} md={2} lg={5.5}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">Assets Summary</Typography>\r\n                        </Grid>\r\n                        {pieChart && (\r\n                            <Card sx={{ maxWidth: 675 }}>\r\n                                <CardActionArea>\r\n                                    <CardContent>\r\n                                        <div id=\"chart\">\r\n                                            {/* <ReactApexChart\r\n                                                options={options}\r\n                                                series={[\r\n                                                    activewazuhData?.length,\r\n                                                    disconnectedwazuhData?.length,\r\n                                                    neverconnectedwazuhData?.length\r\n                                                ]}\r\n                                                type=\"donut\"\r\n                                            /> */}\r\n                                            <Doughnut\r\n                                                data={{\r\n                                                    labels: ['Connected', 'Disconnected', 'Never Connected'],\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label: '# of votes',\r\n                                                            data: [\r\n                                                                activewazuhData?.length,\r\n                                                                disconnectedwazuhData?.length,\r\n                                                                neverconnectedwazuhData?.length\r\n                                                            ],\r\n                                                            backgroundColor: ['#1890ff', '#EE280E', '#CF7D00'],\r\n\r\n                                                            borderWidth: 1\r\n                                                        }\r\n                                                    ]\r\n                                                }}\r\n                                                height={242}\r\n                                                width={300}\r\n                                                options={{\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                ticks: {\r\n                                                                    beginAtZero: true\r\n                                                                }\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n                                                    legend: {\r\n                                                        labels: {\r\n                                                            fontSize: 10\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <Typography style={{ color: 'black' }} className=\"mt-2\" variant=\"h5\">\r\n                                            Total Assets : {wazuhData?.length}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={7} lg={6.5} sm={3} md={2}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">Operating System Of Assets </Typography>\r\n                        </Grid>\r\n                        {barChart && (\r\n                            <Card sx={{ maxWidth: 675 }}>\r\n                                <CardActionArea>\r\n                                    <CardContent>\r\n                                        <div id=\"chart\" style={{ marginTop: '20px', color: 'black' }}>\r\n                                            <Chart\r\n                                                type=\"bar\"\r\n                                                width={480}\r\n                                                height={240}\r\n                                                series={[\r\n                                                    {\r\n                                                        name: 'OS',\r\n                                                        data: [\r\n                                                            windows?.length,\r\n                                                            linux?.length,\r\n                                                            body?.body?.length - windows?.length - linux?.length\r\n                                                        ]\r\n                                                    }\r\n                                                ]}\r\n                                                options={{\r\n                                                    // title: {\r\n                                                    //     text: 'BarChar Developed by DevOps Team',\r\n                                                    //     style: { fontSize: 30 }\r\n                                                    // },\r\n\r\n                                                    // subtitle: {\r\n                                                    //     text: 'This is BarChart Graph',\r\n                                                    //     style: { fontSize: 18 }\r\n                                                    // },\r\n\r\n                                                    colors: ['rgb(24, 144, 255)'],\r\n                                                    theme: { mode: 'light' },\r\n\r\n                                                    xaxis: {\r\n                                                        tickPlacement: 'on',\r\n                                                        categories: ['Windows', 'Linux', 'Others']\r\n                                                    },\r\n\r\n                                                    yaxis: {\r\n                                                        labels: {\r\n                                                            formatter: (val) => {\r\n                                                                return `${val}`;\r\n                                                            },\r\n                                                            style: { fontSize: '16', colors: ['rgb(24, 144, 255)'] }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    // legend: {\r\n                                                    //     show: true,\r\n                                                    //     position: 'right'\r\n                                                    // },\r\n\r\n                                                    // dataLabels: {\r\n                                                    //     formatter: (val) => {\r\n                                                    //         return `${val}`;\r\n                                                    //     },\r\n                                                    //     style: {\r\n                                                    //         colors: ['#f4f4f4'],\r\n                                                    //         fontSize: 15\r\n                                                    //     }\r\n                                                    // }\r\n                                                }}\r\n                                            ></Chart>\r\n                                        </div>\r\n                                    </CardContent>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </MainCard>\r\n\r\n            <MainCard style={{ color: 'black', marginTop: '20px' }}>\r\n                <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Most Triggered Rule</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </MainCard>\r\n\r\n            <MainCard style={{ color: 'black', marginTop: '20px' }}>\r\n                <Grid item>\r\n                    <Typography variant=\"h5\">Latest Integrations</Typography>\r\n                </Grid>\r\n                <OrderTable reports={body && body.body} />\r\n            </MainCard>\r\n            <Button variant=\"outlined\" className=\"mt-3 ms-4\" color=\"primary\" onClick={handleWazuhOpen}>\r\n                Open Wazuh\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Report;\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { Box, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n// third-party\r\nimport NumberFormat from 'react-number-format';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n// project import\r\nimport Dot from 'components/@extended/Dot';\r\nimport { Grid } from '@mui/material';\r\nimport FullScreenDialog from './Dialog';\r\nimport { useEffect } from 'react';\r\n\r\nfunction createData(trackingNo, name, fat, carbs, protein) {\r\n    return { trackingNo, name, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData(84564564, 'Camera Lens', 40, 2, 40570),\r\n    createData(98764564, 'Laptop', 300, 0, 180139),\r\n    createData(98756325, 'Mobile', 355, 1, 90989),\r\n    createData(98652366, 'Handset', 50, 1, 10239),\r\n    createData(13286564, 'Computer Accessories', 100, 1, 83348),\r\n    createData(86739658, 'TV', 99, 0, 410780),\r\n    createData(13256498, 'Keyboard', 125, 2, 70999),\r\n    createData(98753263, 'Mouse', 89, 2, 10570),\r\n    createData(98753275, 'Desktop', 185, 1, 98063),\r\n    createData(98753291, 'Chair', 100, 0, 14001)\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) {\r\n            return order;\r\n        }\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n// ==============================|| ORDER TABLE - HEADER CELL ||============================== //\r\n\r\nconst headCells = [\r\n    {\r\n        id: 'name',\r\n        align: 'left',\r\n        disablePadding: true,\r\n        label: 'Name'\r\n    },\r\n    {\r\n        id: 'fat',\r\n        align: 'left',\r\n        disablePadding: false,\r\n        label: 'IP'\r\n    },\r\n    {\r\n        id: 'carbs',\r\n        align: 'left',\r\n        disablePadding: false,\r\n\r\n        label: 'Creation Date'\r\n    },\r\n    {\r\n        id: 'protein',\r\n        align: 'left',\r\n        disablePadding: false,\r\n        label: 'OS'\r\n    },\r\n    {\r\n        id: 'protein',\r\n        align: 'left',\r\n        disablePadding: false,\r\n        label: 'Last Responded'\r\n    },\r\n    {\r\n        id: 'protein',\r\n        align: 'left',\r\n        disablePadding: false,\r\n        label: 'Status'\r\n    }\r\n];\r\n\r\n// ==============================|| ORDER TABLE - HEADER ||============================== //\r\n\r\nfunction OrderTableHead({ order, orderBy }) {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        style={{ color: 'black' }}\r\n                        key={headCell.id}\r\n                        align={headCell.align}\r\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        {headCell.label}\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nOrderTableHead.propTypes = {\r\n    order: PropTypes.string,\r\n    orderBy: PropTypes.string\r\n};\r\n\r\n// ==============================|| ORDER TABLE - STATUS ||============================== //\r\n\r\nconst OrderStatus = ({ status }) => {\r\n    let color;\r\n    let title;\r\n\r\n    switch (status) {\r\n        case 0:\r\n            color = 'warning';\r\n            title = 'Pending';\r\n            break;\r\n        case 1:\r\n            color = 'success';\r\n            title = 'Approved';\r\n            break;\r\n        case 2:\r\n            color = 'error';\r\n            title = 'Rejected';\r\n            break;\r\n        default:\r\n            color = 'primary';\r\n            title = 'None';\r\n    }\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n            <Dot color={color} />\r\n            <Typography>{title}</Typography>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nOrderStatus.propTypes = {\r\n    status: PropTypes.number\r\n};\r\n\r\n// ==============================|| ORDER TABLE ||============================== //\r\n\r\nexport default function OrderTable({ reports }) {\r\n    const [order] = useState('asc');\r\n    const [orderBy] = useState('trackingNo');\r\n    const [selected] = useState([]);\r\n    const [newData, setNewData] = useState([]);\r\n    const [clientData, setClientData] = useState([]);\r\n    const [clientEmail, setClientEmail] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [report, setReport] = useState([]);\r\n    const [ioc, setIoc] = useState([]);\r\n    const [cves, setCves] = useState([]);\r\n    const [affectedProduct, setAffectedProduct] = useState([]);\r\n    const [changeNewData, setChangeNewData] = useState(false);\r\n    const [showReport, setShowReport] = useState(false);\r\n    const [reportId, setReportId] = useState(0);\r\n    const search = { outline: 'none', boxShadow: 'none' };\r\n    const isSelected = (trackingNo) => selected.indexOf(trackingNo) !== -1;\r\n\r\n    // reports?.splice(0, 1);\r\n\r\n    const handleSearch = (event) => {\r\n        const searched = event.target.value.toLowerCase().replace(/[^a-zA-Z0-9;., ]/g, '');\r\n        const data = reports?.filter(\r\n            (e) =>\r\n                e.name?.toLowerCase().search(searched) !== -1 ||\r\n                e.os?.name?.toLowerCase().search(searched) !== -1 ||\r\n                e.lastKeepAlive?.toLowerCase().search(searched) !== -1 ||\r\n                e.status?.toLowerCase().search(searched) !== -1 ||\r\n                e.ip?.toString().toLowerCase().search(searched) !== -1 ||\r\n                e.dateAdd?.toString()?.toLowerCase().search(searched) !== -1\r\n        );\r\n\r\n        setNewData(data);\r\n        setChangeNewData(true);\r\n    };\r\n    console.log(reports);\r\n    const closeDialog = () => {\r\n        setShowReport(false);\r\n    };\r\n    console.log(reports);\r\n    return (\r\n        <>\r\n            {!showReport && (\r\n                <>\r\n                    <Grid item xs={12} className=\"mx-3\">\r\n                        <div className=\"input-group mb-3 mt-3\">\r\n                            <input\r\n                                style={search}\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Search Here\"\r\n                                aria-label=\"Recipient's username\"\r\n                                aria-describedby=\"button-addon2\"\r\n                                onChange={handleSearch}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Box>\r\n                        <TableContainer\r\n                            sx={{\r\n                                width: '100%',\r\n                                overflowX: 'auto',\r\n                                position: 'relative',\r\n                                display: 'block',\r\n                                maxWidth: '100%',\r\n                                color: 'black',\r\n                                '& td, & th': { whiteSpace: 'nowrap' }\r\n                            }}\r\n                        >\r\n                            <Table\r\n                                aria-labelledby=\"tableTitle\"\r\n                                sx={{\r\n                                    '& .MuiTableCell-root:first-child': {\r\n                                        pl: 2\r\n                                    },\r\n                                    '& .MuiTableCell-root:last-child': {\r\n                                        pr: 3\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <OrderTableHead order={order} orderBy={orderBy} />\r\n                                {reports !== undefined && reports?.length > 0 && (\r\n                                    <TableBody>\r\n                                        {!changeNewData\r\n                                            ? reports !== undefined &&\r\n                                              reports?.length > 0 &&\r\n                                              reports?.map((row, index) => {\r\n                                                  const isItemSelected = isSelected(row.trackingNo);\r\n                                                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                                  return (\r\n                                                      <>\r\n                                                          <TableRow\r\n                                                              hover\r\n                                                              style={{ color: 'black' }}\r\n                                                              role=\"checkbox\"\r\n                                                              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                                              aria-checked={isItemSelected}\r\n                                                              tabIndex={-1}\r\n                                                              key={row.trackingNo}\r\n                                                              selected={isItemSelected}\r\n                                                          >\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {row.name}\r\n                                                              </TableCell>\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {row.ip}\r\n                                                              </TableCell>\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {/* <OrderStatus status={row.date} /> */}\r\n                                                                  {row.dateAdd}\r\n                                                              </TableCell>\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                  {row?.os.name}\r\n                                                              </TableCell>\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                  {row?.lastKeepAlive}\r\n                                                              </TableCell>\r\n                                                              <TableCell\r\n                                                                  align=\"left\"\r\n                                                                  style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                              >\r\n                                                                  {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                  {row?.status}\r\n                                                              </TableCell>\r\n                                                          </TableRow>\r\n                                                      </>\r\n                                                  );\r\n                                              })\r\n                                            : newData?.map((row, index) => {\r\n                                                  const isItemSelected = isSelected(row.trackingNo);\r\n                                                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                                  return (\r\n                                                      <>\r\n                                                          {row.name !== 'Wazuh-Manager' && (\r\n                                                              <TableRow\r\n                                                                  hover\r\n                                                                  role=\"checkbox\"\r\n                                                                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                                                  aria-checked={isItemSelected}\r\n                                                                  tabIndex={-1}\r\n                                                                  key={index}\r\n                                                                  selected={isItemSelected}\r\n                                                              >\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {row.name}\r\n                                                                  </TableCell>\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {row.ip}\r\n                                                                  </TableCell>\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {/* <OrderStatus status={row.date} /> */}\r\n                                                                      {row.dateAdd}\r\n                                                                  </TableCell>\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                      {row?.os.name}\r\n                                                                  </TableCell>\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                      {row?.lastKeepAlive}\r\n                                                                  </TableCell>\r\n                                                                  <TableCell\r\n                                                                      align=\"left\"\r\n                                                                      style={{ color: 'black', textTransform: 'capitalize' }}\r\n                                                                  >\r\n                                                                      {/* <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" /> */}\r\n                                                                      {row?.status}\r\n                                                                  </TableCell>\r\n                                                              </TableRow>\r\n                                                          )}\r\n                                                      </>\r\n                                                  );\r\n                                              })}\r\n                                    </TableBody>\r\n                                )}\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Box>\r\n                </>\r\n            )}\r\n\r\n            {/* {\r\n                <FullScreenDialog\r\n                    showReport={showReport}\r\n                    onClose={closeDialog}\r\n                    clientData={clientData}\r\n                    clientEmail={clientEmail}\r\n                    data={data}\r\n                    report={report}\r\n                    ioc={ioc}\r\n                    cves={cves}\r\n                    affectedProduct={affectedProduct}\r\n                />\r\n            } */}\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst IncomeAreaChart = ({ slot }) => {\r\n    const theme = useTheme();\r\n\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n\r\n    useEffect(() => {\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n            colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n            xaxis: {\r\n                categories:\r\n                    slot === 'month'\r\n                        ? ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n                        : ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n                labels: {\r\n                    style: {\r\n                        colors: [\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary,\r\n                            secondary\r\n                        ]\r\n                    }\r\n                },\r\n                axisBorder: {\r\n                    show: true,\r\n                    color: line\r\n                },\r\n                tickAmount: slot === 'month' ? 11 : 7\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [secondary]\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                borderColor: line\r\n            },\r\n            tooltip: {\r\n                theme: 'light'\r\n            }\r\n        }));\r\n    }, [primary, secondary, line, theme, slot]);\r\n\r\n    const [series, setSeries] = useState([\r\n        {\r\n            name: 'Viewed ',\r\n            data: [0, 86, 28, 115, 48, 210, 136]\r\n        },\r\n        {\r\n            name: 'UnViewed ',\r\n            data: [0, 43, 14, 56, 24, 105, 68]\r\n        }\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setSeries([\r\n            {\r\n                name: 'Viewed ',\r\n                data: slot === 'month' ? [76, 85, 101, 98, 87, 105, 91, 114, 94, 86, 115, 35] : [31, 40, 28, 51, 42, 109, 100]\r\n            },\r\n            {\r\n                name: 'UnViewed ',\r\n                data: slot === 'month' ? [110, 60, 150, 35, 60, 36, 26, 45, 65, 52, 53, 41] : [11, 32, 45, 32, 34, 52, 41]\r\n            }\r\n        ]);\r\n    }, [slot]);\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={250} />;\r\n};\r\n\r\nIncomeAreaChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default IncomeAreaChart;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Chip, Grid, Stack, Typography, Button } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\n\r\n// assets\r\nimport { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\r\n\r\nconst AnalyticEcommerce = ({ color, title, count, percentage, isLoss, extra, fontColor }) => (\r\n    <>\r\n        <MainCard contentSX={{ p: 2.25 }}>\r\n            <Stack spacing={0.5}>\r\n                <Typography variant=\"h6\" color=\"textSuccess\" style={{ color: 'black ' }}>\r\n                    {title}\r\n                </Typography>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h4\" style={{ color: `${fontColor}`, fontWeight: 'bold' }} type=\"number\">\r\n                            {count ? count : 0}\r\n                        </Typography>\r\n                    </Grid>\r\n                    {percentage && (\r\n                        <Grid item>\r\n                            <Chip\r\n                                variant=\"combined\"\r\n                                color={color}\r\n                                icon={\r\n                                    <>\r\n                                        {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                                        {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                                    </>\r\n                                }\r\n                                label={`${percentage}%`}\r\n                                sx={{ ml: 1.25, pl: 1 }}\r\n                                size=\"small\"\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Stack>\r\n            {/* <Box sx={{ pt: 2.25 }}>\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                <Typography component=\"span\" variant=\"caption\" sx={{ color: `${color || 'primary'}.main` }}>\r\n                    {extra}\r\n                </Typography>{' '}\r\n                created today\r\n            </Typography>\r\n        </Box> */}\r\n        </MainCard>\r\n    </>\r\n);\r\n\r\nAnalyticEcommerce.propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    count: PropTypes.number,\r\n    percentage: PropTypes.number,\r\n    isLoss: PropTypes.bool,\r\n    extra: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\r\n};\r\n\r\nAnalyticEcommerce.defaultProps = {\r\n    color: 'primary'\r\n};\r\n\r\nexport default AnalyticEcommerce;\r\n"],"sourceRoot":""}